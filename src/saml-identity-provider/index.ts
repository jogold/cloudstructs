import * as iam from '@aws-cdk/aws-iam';
import * as cdk from '@aws-cdk/core';
import * as cr from '@aws-cdk/custom-resources';
import { IAM } from 'aws-sdk'; // eslint-disable-line import/no-extraneous-dependencies

/**
 * Properties for a SamlProvider
 */
export interface SamlIdentityProviderProps {
  /**
   * A name for the SAML identity provider
   *
   * @default - derived for the node's unique id
   */
  readonly name?: string;

  /**
   * An XML document generated by an identity provider (IdP) that supports SAML 2.0.
   *
   * The document includes the issuer's name, expiration information, and keys that
   * can be used to validate the SAML authentication response (assertions) that are
   * received from the IdP. You must generate the metadata document using the identity
   * management software that is used as your organization's IdP.
   */
  readonly metadataDocument: string;
}

/**
 * Create a SAML identity provider
 */
export class SamlIdentityProvider extends cdk.Construct {
  /**
   * The ARN of the SAML identity provider
   */
  public readonly samlIdentityProviderArn: string;

  constructor(scope: cdk.Construct, id: string, props: SamlIdentityProviderProps) {
    super(scope, id);

    const name = props.name ?? `${cdk.Names.uniqueId(this)}IdentityProvider`;

    const arn = cdk.Stack.of(this).formatArn({
      service: 'iam',
      region: '',
      resource: 'saml-provider',
      resourceName: name,
    });

    const idp = new cr.AwsCustomResource(this, 'Resource', {
      resourceType: 'Custom::SamlIdentityProvider',
      onCreate: {
        service: 'IAM',
        action: 'createSAMLProvider',
        parameters: {
          Name: name,
          SAMLMetadataDocument: props.metadataDocument,
        } as IAM.CreateSAMLProviderRequest,
        physicalResourceId: cr.PhysicalResourceId.fromResponse('SAMLProviderArn'),
      },
      onUpdate: {
        service: 'IAM',
        action: 'updateSAMLProvider',
        parameters: {
          SAMLProviderArn: new cr.PhysicalResourceIdReference().toJSON(),
          SAMLMetadataDocument: props.metadataDocument,
        } as IAM.UpdateSAMLProviderRequest,
        physicalResourceId: cr.PhysicalResourceId.fromResponse('SAMLProviderArn'),
      },
      onDelete: {
        service: 'IAM',
        action: 'deleteSAMLProvider',
        parameters: {
          SAMLProviderArn: new cr.PhysicalResourceIdReference().toJSON(),
        } as IAM.DeleteSAMLProviderRequest,
      },
      policy: cr.AwsCustomResourcePolicy.fromStatements([
        new iam.PolicyStatement({
          actions: [
            'iam:createSAMLProvider',
            'iam:updateSAMLProvider',
            'iam:deleteSAMLProvider',
          ],
          resources: [arn],
        }),
      ]),
    });

    this.samlIdentityProviderArn = idp.getResponseField('SAMLProviderArn');
  }
}
